### YamlMime:TSType
name: IClientSideComponentManifest
uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest:interface'
package: '@microsoft/sp-module-interfaces!'
fullName: IClientSideComponentManifest
summary: >-
  All client-side components built on the SharePoint framework need a valid component manifest. This interface
  represents properties that are required by all types of client-side components like Applications and Web Parts.
  Component specific manifests will extend this interface to add properties required by that component type.
remarks: >-
  The schema of this manifest is owned and versioned by Microsoft. Following rules should be followed while changing
  this schema. This set of rules can also be called the "manifest upgrade rules".


  - For minor changes, new properties can be added to this schema in a backwards-compatible way. i.e. the code that
  processes the manifest should be able to handle the absence of those new properties.


  - Try to model your changes as minor SemVer increments. Major version changes should be avoided because they impose a
  migration cost on developers.


  - The `'manifestVersion'` should be bumped for all small or big changes.
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: alias
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#alias:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: alias
    summary: >-
      A short name usually given by developer. It does not need to be localized and is expected to stay the same through
      the lifetime of the component. If an application overrides the `ClientSideApplication.alias` property,
      `ClientSideApplication.alias` is given precedence over the value provided in the manifest.
    remarks: |-
      Usage: A short name to identify a client-side component by developer.

      Supported values: Allowed characters are a-z, A-Z, and '-'. Not longer than 40 characters.

      Example: `"NewFeed"`
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alias: string;'
      return:
        type: string
  - name: componentType
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#componentType:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: componentType
    summary: >-
      Type of client-side component. Components with the "Application" type are defined by the
      "IClientSideApplicationManifest" interface. Components with the "WebPart" type are defined by the
      "IClientSideWebPartManifest" interface. Components with the "Library" type are defined by the
      "IClientSideLibraryManifest" interface. Components with the "AdaptiveCardExtension" type are defined by the
      "IAdaptiveCardExtensionManifest" interface.
    remarks: >-
      Usage: To help bundling, loading, enumeration, and initialization of components based on their contents.


      Supported values: `"Application"`<!-- -->, `"WebPart"`<!-- -->, `"Library"`<!-- -->, `"Extension"`<!-- -->,
      `"AdaptiveCardExtension"`
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentType: ComponentType;'
      return:
        type: <xref uid="@microsoft/sp-module-interfaces!ComponentType:type" />
  - name: experimentalData
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#experimentalData:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: experimentalData
    summary: An untyped property bag for experimental flags not ready for production.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: |-
        experimentalData?: {
                [key: string]: any;
            };
      return:
        type: |-
          {
                  [key: string]: any;
              }
  - name: isolatedDomain
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#isolatedDomain:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: isolatedDomain
    summary: The domain that the component should run on.
    remarks: 'Example: `''PrepSPO-appFEEAB5CE1CB0421FB1AAE5D09E0A8AAA.spgrid.com''`'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'isolatedDomain?: string;'
      return:
        type: string
  - name: loaderConfig
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#loaderConfig:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: loaderConfig
    summary: >-
      This portion of the configuration describes how the component is to be loaded and initialized by a client. It
      contains an enumeration of scripts that the component requires along with a single entry point script.
    remarks: |-
      Usage: Loading a component.

      See `IClientSideComponentLoaderConfiguration` for more information and examples.
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'loaderConfig: IClientSideComponentLoaderConfiguration;'
      return:
        type: <xref uid="@microsoft/sp-module-interfaces!IClientSideComponentLoaderConfiguration:interface" />
  - name: loadLegacyFabricCss
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#loadLegacyFabricCss:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: loadLegacyFabricCss
    summary: >-
      This property is used to keep older components that don't explicitly use fabric CSS. For the most part, webparts
      build after using spfx 1.1 don't need this.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'loadLegacyFabricCss?: boolean;'
      return:
        type: boolean
  - name: preloadComponents
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#preloadComponents:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: preloadComponents
    summary: >-
      A list of component manifests that must be preloaded alongside this component. These may include external
      resources that are needed during initial render, or components that should be loaded only on demand.
    remarks: |-
      Supported values: an array of manifest IDs

      Example: `[ "66665f5e-307f-41cf-9fec-17c5ea20f0ca", "2d02eafb-eb82-47d2-98ac-dcac4aa63969" ]`
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'preloadComponents?: string[];'
      return:
        type: string[]
  - name: requiresCustomScript
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#requiresCustomScript:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: requiresCustomScript
    summary: >-
      If true, the component behaves as following on sites where custom scripts are not allowed to run:
      - when the component is a web part, it is not available in the web part picker
      - every instance of the component that was added to the page while custom scripts were allowed to run, will no longer surface in those pages. Author are still able to remove those components while editing the page 
   
    remarks: >-
      Defaults to false. See
      https://support.office.com/en-us/article/Turn-scripting-capabilities-on-or-off-1f2c515f-5d7e-448a-9fd7-835da935584f
      for more information.


      Usage: Requires Custom Script to be allowed in order for this component to be installed and run.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'requiresCustomScript?: boolean;'
      return:
        type: boolean
  - name: safeWithCustomScriptDisabled
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#safeWithCustomScriptDisabled:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: safeWithCustomScriptDisabled
    summary: This property is provided for backwards compatibility. It no longer has any effect.
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use requiresCustomScript instead of safeWithCustomScriptDisabled.
    syntax:
      content: 'safeWithCustomScriptDisabled?: boolean;'
      return:
        type: boolean
  - name: version
    uid: '@microsoft/sp-module-interfaces!IClientSideComponentManifest#version:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: version
    summary: >-
      Client-side component version. The value of this field is expected to be controlled by the developer of the
      client-side component.
    remarks: >-
      The purpose of this field is to help client-side component developers upgrade their client-side components in a
      managed way. This helps the consumers of the client-side component make decisions about when and how to upgrade
      the client-side component. As the developer evolves the code for their client-side component, they can decide to
      bump the MAJOR, MINOR or PATCH version of the component.


      All incompatible API changes should result in a MAJOR version bump. Backwards compatible functionality changes
      should result in a MINOR version bump, and backwards compatible bug fixes should result in a PATCH version bump.
      Please see [http://semver.org](http://semver.org) for more details on how to manage the version of your
      components.


      Usage: Versioning and evolving a client-side component safely in a controlled way.


      Supported values: string representing a [semantic version](http://semver.org) i.e. MAJOR.MINOR.PATCH


      Example: `"1.0.0"`
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'version: string;'
      return:
        type: string
extends: <xref uid="@microsoft/sp-module-interfaces!IClientSideManifestBase:interface" />
