### YamlMime:TSType
name: IClientSideWebPartManifest
uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest:interface'
package: '@microsoft/sp-module-interfaces!'
fullName: IClientSideWebPartManifest
summary: >-
  The client-side SharePoint framework identifies a Web Part by its manifest. All Web Parts are expected to have a
  manifest.
remarks: >-
  The manifest is a schematized JSON blob that is used in multiple parts of the SharePoint infrastructure to identify,
  load and process a Web Part. The schema for this manifest is completely owned and versioned by Microsoft. There are
  some required properties in the manifest and some optional properties. Optional properties need to be provided only if
  the Web Part needs the specific functionality. An invalid manifest could lead to issues with Web Part loading and
  functionality problems.
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: canUpdateConfiguration
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#canUpdateConfiguration:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: canUpdateConfiguration
    summary: Indicates whether the web part uses the property pane to update the configuration of the web part.
    remarks: Default value is `true` if the property is not explicitly defined.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'canUpdateConfiguration?: boolean;'
      return:
        type: boolean
  - name: disabledOnClassicSharepoint
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#disabledOnClassicSharepoint:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: disabledOnClassicSharepoint
    summary: 'If true, this web part is disabled on SharePoint classic pages'
    remarks: >-
      Certain web parts may not be required on or apply to SharePoint classic pages. This flag helps control that. If
      this flag is true, the web part will not appear in the classic page web part gallery.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'disabledOnClassicSharepoint?: boolean;'
      return:
        type: boolean
  - name: experimentalData
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#experimentalData:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: experimentalData
    summary: An untyped property bag for experimental flags not ready for production.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: |-
        experimentalData?: {
                [key: string]: any;
            };
      return:
        type: |-
          {
                  [key: string]: any;
              }
  - name: flexibleLayoutSizing
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#flexibleLayoutSizing:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: flexibleLayoutSizing
    summary: >-
      Definition: Defines the default sizing of webpart in flexible sections, as well as if it supports dynamic
      resizing. Example:


      ```

      flexibleLayoutSizing: {
          supportsDynamicResizing: false,
          defaultColumnWidth: 22,
          defaultRowHeight: 21
      }

      ```
    remarks: Ensure this remains up to date with IFlexibleControlSizingData in FlexibleControl.types.ts
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'flexibleLayoutSizing?: IFlexibleLayoutSizing;'
      return:
        type: '<xref uid="@microsoft/sp-module-interfaces!IFlexibleLayoutSizing:interface" />'
  - name: hiddenFromToolbox
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#hiddenFromToolbox:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: hiddenFromToolbox
    summary: 'If true, this web part should not be displayed in the modern SharePoint toolbox.'
    remarks: >-
      Usage: Use this flag if it is not appropriate to display a web part in the modern toolbox. This property is not
      used in Classic SharePoint. By default, all web parts are enabled to be displayed in the toolbox. Such web parts
      can be provisioned on pages though API or be added to the page in a pre configured way.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hiddenFromToolbox?: boolean;'
      return:
        type: boolean
  - name: imagePreviewUrl
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#imagePreviewUrl:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: imagePreviewUrl
    summary: 'Definition: Url of the image image used for preview'
    remarks: >-
      Usage: Use this string to specify that a preview image should be used instead of a preview rendering of the web
      part. This can either be a absolute url or a relative URL which will be resolved based on the internal base module
      url
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'imagePreviewUrl?: string;'
      return:
        type: string
  - name: jsonSchema
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#jsonSchema:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: jsonSchema
    summary: >-
      Optional JSON schema definition of the web part's properties. If provided, the schema will be provide additional
      validation for the type safety of the web part's persisted format.
    remarks: Current support JSON Schema draft v4+ schemas
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        jsonSchema?: {
                [key: string]: unknown;
            };
      return:
        type: |-
          {
                  [key: string]: unknown;
              }
  - name: preconfiguredEntries
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#preconfiguredEntries:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: preconfiguredEntries
    summary: >-
      A Web Part can have pre-configured properties like the title, description, toolbox group name and Web Part
      specific custom properties. And there can be multiple instances of these pre-configured properties.
    remarks: >-
      This helps support scenarios where an organization may want to present multiple pre-configured entries for a Web
      Part in the Toolbox. Each entry is expected to configure the Web Part with a different set of pre-configured
      properties. A developer may decide to seed some initial values for these properties but an organization admin can
      go ahead and customize these properties per the needs of his/her organization. The properties can also be modified
      by the author of the page.


      Usage: help display a Web Part in the Toolbox, PropertyPane and the initial rendering of the Web Part.


      Type: JSON object


      Supported values: Array of `IClientSideWebPartManifestEntry` objects.


      Example:


      ```
        [{
           title:"Image Web Part",
           description: "This Web Part displays an image",
           group: "Media",
           iconFontName: "image",
           properties: {
             imageSource: "https://contoso.akamaihd.net/files/mountRainier.jpg",
             captionText: "Mount Rainier"
           }
         }]
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'preconfiguredEntries: IClientSideWebPartManifestEntry<TProperties>[];'
      return:
        type: '<xref uid="@microsoft/sp-module-interfaces!IClientSideWebPartManifestEntry:interface" />&lt;TProperties&gt;[]'
  - name: requiredCapabilities
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#requiredCapabilities:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: requiredCapabilities
    summary: >-
      The set of capabilities this web part requires from the host page in order to be usable. If the host does not
      support one of the required capabilities, the web part will not be visible in the toolbox.
    remarks: 'Example `{ "BingMapKey": true, "AuthModel": ["OpenIDConnect"] }`'
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'requiredCapabilities?: ICapabilityCollection;'
      return:
        type: '<xref uid="@microsoft/sp-module-interfaces!ICapabilityCollection:interface" />'
  - name: supportedHosts
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#supportedHosts:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: supportedHosts
    summary: 'Definition: An array defining what host types are supported'
    remarks: >-
      Usage: Use this array to define all hosts that are supported. The default value is SharePointWebPart if nothing is
      provided. If SharePointFullPage is added the solution will be available when adding full page apps. If
      SharePointWebPart is added the solution will be available when adding webparts to a page. If TeamsTab,
      TeamsPersonalApp, or TeamsMeetingApp is added the solution will be available when using teams. TeamsMeetingApp
      cannot be used with TeamsTab or TeamsPersonalTab.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        supportedHosts?: Array<'SharePointFullPage' | 'SharePointWebPart' | 'TeamsTab' | 'TeamsPersonalApp' |
        'TeamsMeetingApp'>;
      return:
        type: Array&lt;'SharePointFullPage' | 'SharePointWebPart' | 'TeamsTab' | 'TeamsPersonalApp' | 'TeamsMeetingApp'&gt;
  - name: supportsFullBleed
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#supportsFullBleed:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: supportsFullBleed
    summary: 'Definition: If true, this web part supports and has been tested for full bleed experience.'
    remarks: >-
      Usage: Use this flag if a web part supports full bleed experience and has been tested as such. In this context,
      full bleed is a term used to denote that the web part takes the whole width of the containing page. Full bleed
      experiences require special treatment and testing. By default no web parts support full bleed experiences.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'supportsFullBleed?: boolean;'
      return:
        type: boolean
  - name: supportsSelfFramingInTeams
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#supportsSelfFramingInTeams:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: supportsSelfFramingInTeams
    summary: >-
      Definition: If true, notifies that the web part will render an iframe with a page from the same SharePoint tenant
      (domain). Example: display a SharePoint Page in an iframe.
    remarks: >-
      Usage: Use this flag if a web part will render an iframe with a page from the same SharePoint tenant (domain) and
      will be hosted as a Teams application (supportedHosts contains any of Teams hosts).
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'supportsSelfFramingInTeams?: boolean;'
      return:
        type: boolean
  - name: supportsThemeVariants
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#supportsThemeVariants:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: supportsThemeVariants
    summary: 'Definition: If true, this web part supports and has been tested for theme variants experience.'
    remarks: >-
      Usage: Use this flag if a web part supports theme variants and has been tested as such. In order to support theme
      variants, web parts must have the capability to render correctly in the context of a theme variant. A web part may
      or may not need to be updated to support theme variants, but should always be tested before enabling this flag. By
      default no web parts support theme variants.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'supportsThemeVariants?: boolean;'
      return:
        type: boolean
  - name: useFallbackWhenPropertiesUpdatedExternally
    uid: '@microsoft/sp-module-interfaces!IClientSideWebPartManifest#useFallbackWhenPropertiesUpdatedExternally:member'
    package: '@microsoft/sp-module-interfaces!'
    fullName: useFallbackWhenPropertiesUpdatedExternally
    summary: >-
      Definition: - If true, the web part will be disposed and reloaded when the web part data is updated by an external
      source. - If false, the web part data will be deserialized and the properties of the web part will be updated,
      onAfterPropertiesUpdatedExternally will be executed. - If undefined, web parts developed with SPFx version below
      1.9 will default to true and web parts developed with a SPFx version 1.9 or greater will default to false.
    remarks: >-
      By default, onAfterPropertiesUpdatedExternally will re-render the web part. If your web part requires specialized
      logic, then it is recommended to override onAfterPropertiesUpdatedExternally.
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'useFallbackWhenPropertiesUpdatedExternally?: boolean;'
      return:
        type: boolean
extends: '<xref uid="@microsoft/sp-module-interfaces!IClientSideComponentManifest:interface" />'
