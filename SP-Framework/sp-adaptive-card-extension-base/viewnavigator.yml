### YamlMime:TSType
name: ViewNavigator
uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator:class'
package: '@microsoft/sp-adaptive-card-extension-base!'
fullName: ViewNavigator
summary: Manages a stack of views.
remarks: The top of the stack represents the currently rendered view.
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: '(constructor)(handleStackChangedCallback, handleInitializeCallback)'
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator:constructor(1)'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: '(constructor)(handleStackChangedCallback, handleInitializeCallback)'
    summary: Constructs a new instance of the `ViewNavigator` class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        constructor(handleStackChangedCallback: (skipUpdate: boolean) => void, handleInitializeCallback: (view: TView)
        => void);
      parameters:
        - id: handleStackChangedCallback
          description: ''
          type: '(skipUpdate: boolean) =&gt; void'
        - id: handleInitializeCallback
          description: ''
          type: '(view: TView) =&gt; void'
properties:
  - name: currentId
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#currentId:member'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: currentId
    summary: Get the id of the currently rendered View from the top of the View stack
    remarks: 'If the stack is empty, this will return undefined'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get currentId(): string | undefined;'
      return:
        type: string | undefined
  - name: size
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#size:member'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: size
    summary: Current size of the View stack.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get size(): number;'
      return:
        type: number
methods:
  - name: pop(skipUpdate)
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#pop:member(1)'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: pop(skipUpdate)
    summary: >-
      If there is more than one View, pops the top View from the View stack.


      [BaseAdaptiveCardExtension.setState()](xref:@microsoft/sp-adaptive-card-extension-base!BaseAdaptiveCardExtension%23setState:member(1))<!--
      -->, which will also trigger a render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pop(skipUpdate?: boolean): void;'
      parameters:
        - id: skipUpdate
          description: Whether to skip the update (and re-render) after popping the current View.
          type: boolean
      return:
        type: void
        description: ''
  - name: 'push(id, skipUpdate)'
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#push:member(1)'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: 'push(id, skipUpdate)'
    summary: >-
      Pushes a new view to the top of the view stack.


      [BaseAdaptiveCardExtension.setState()](xref:@microsoft/sp-adaptive-card-extension-base!BaseAdaptiveCardExtension%23setState:member(1))<!--
      -->, which will also trigger a render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'push(id: string, skipUpdate?: boolean): void;'
      parameters:
        - id: id
          description: Unique identifier for the view.
          type: string
        - id: skipUpdate
          description: Whether to skip the update (and re-render) after pushing the new view.
          type: boolean
      return:
        type: void
        description: ''
  - name: 'register(id, initializer)'
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#register:member(1)'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: 'register(id, initializer)'
    summary: Registers a new view.
    remarks: 'A View with a given `id` is only initialized once, and the instance is reused if it is pushed more than once'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'register(id: string, initializer: () => TView | Promise<TView>): void;'
      parameters:
        - id: id
          description: Unique identifier for the view.
          type: string
        - id: initializer
          description: >-
            Function that returns a new view - or a promise to a new view - which is only called if no view with the
            `id` already exists.
          type: () =&gt; TView | Promise&lt;TView&gt;
      return:
        type: void
        description: ''
  - name: 'replace(id, skipUpdate)'
    uid: '@microsoft/sp-adaptive-card-extension-base!ViewNavigator#replace:member(1)'
    package: '@microsoft/sp-adaptive-card-extension-base!'
    fullName: 'replace(id, skipUpdate)'
    summary: >-
      Replaces the top view with a new view.


      [BaseAdaptiveCardExtension.setState()](xref:@microsoft/sp-adaptive-card-extension-base!BaseAdaptiveCardExtension%23setState:member(1))<!--
      -->, which will also trigger a render.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'replace(id: string, skipUpdate?: boolean): void;'
      parameters:
        - id: id
          description: Unique identifier for the view.
          type: string
        - id: skipUpdate
          description: Whether to skip the update (and re-render) after replacing the current view.
          type: boolean
      return:
        type: void
        description: ''
