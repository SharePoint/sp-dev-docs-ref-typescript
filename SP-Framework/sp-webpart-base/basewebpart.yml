### YamlMime:TSType
name: BaseWebPart
uid: '@microsoft/sp-webpart-base!BaseWebPart:class'
package: '@microsoft/sp-webpart-base!'
fullName: BaseWebPart
summary: >-
  This abstract class implements the UI-agnostic base functionality for a client-side web part. The purpose is to allow
  a common core between 2D and MR WebParts.
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: (constructor)()
    uid: '@microsoft/sp-webpart-base!BaseWebPart:constructor(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: (constructor)()
    summary: Constructor for the `BaseWebPart` class.
    remarks: >-
      It is highly recommended that the web part use the OnInit API to perform any web part specific initialization.
      Most of the web part features like this.context and this.properties are not available to be used before the the
      onInit part of the web part loading lifecycle.
    isPreview: false
    isDeprecated: false
    syntax:
      content: constructor();
properties:
  - name: accessibleTitle
    uid: '@microsoft/sp-webpart-base!BaseWebPart#accessibleTitle:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: accessibleTitle
    summary: >-
      This property points to the accessible title of web part made available to screen readers. The base implementation
      returns that default title in the manifest. Web parts that want to provide more descriptive title containing
      contextual information need to override this API. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get accessibleTitle(): string;'
      return:
        type: string
  - name: context
    uid: '@microsoft/sp-webpart-base!BaseWebPart#context:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: context
    summary: Use the context object to access common services and state associated with the component.
    remarks: >-
      Child classes are expected to override this field by redeclaring it with a specialized type. It is meant to be a
      read-only property; the type cannot be declared as read-only in the base class (because it is initialized outside
      the constructor), but child classes should redeclare it as readonly.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly context: BaseWebPartContext;'
      return:
        type: '<xref uid="@microsoft/sp-webpart-base!BaseWebPartContext:class" />'
  - name: dataVersion
    uid: '@microsoft/sp-webpart-base!BaseWebPart#dataVersion:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: dataVersion
    summary: >-
      The value of this property is stored in the serialized data of the web part to allow developers to manage
      versioning of their web part. The default version is 1.0
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get dataVersion(): Version;'
      return:
        type: '<xref uid="@microsoft/sp-core-library!Version:class" />'
  - name: description
    uid: '@microsoft/sp-webpart-base!BaseWebPart#description:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: description
    summary: Description of the WebPart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get description(): string;'
      return:
        type: string
  - name: disableReactivePropertyChanges
    uid: '@microsoft/sp-webpart-base!BaseWebPart#disableReactivePropertyChanges:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: disableReactivePropertyChanges
    summary: This property is used to change the web part's property pane interaction from Reactive to NonReactive. virtual
    remarks: >-
      The default behavior is Reactive.


      Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
      see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
      configuration changes or not.


      NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
      button is clicked.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get disableReactivePropertyChanges(): boolean;'
      return:
        type: boolean
  - name: displayMode
    uid: '@microsoft/sp-webpart-base!BaseWebPart#displayMode:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: displayMode
    summary: This property is the current display mode of the web part.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get displayMode(): DisplayMode;'
      return:
        type: '<xref uid="@microsoft/sp-core-library!DisplayMode:enum" />'
  - name: previewImageUrl
    uid: '@microsoft/sp-webpart-base!BaseWebPart#previewImageUrl:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: previewImageUrl
    summary: >-
      This property points to the preview image for the web part. The base implementation returns undefined. Web parts
      that want to provide a valid preview image url need to override this API. The preview image url can be used to
      create a preview of the web part or of the page on which the web part is present. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get previewImageUrl(): string | undefined;'
      return:
        type: string | undefined
  - name: properties
    uid: '@microsoft/sp-webpart-base!BaseWebPart#properties:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: properties
    summary: This property is the pointer to the custom property bag of the web part.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get properties(): TProperties;'
      return:
        type: TProperties
  - name: propertiesMetadata
    uid: '@microsoft/sp-webpart-base!BaseWebPart#propertiesMetadata:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: propertiesMetadata
    summary: >-
      This property defines metadata for the web part property bag. The metadata can help SharePoint understand the
      content of the properties better and perform relevant services on the data. virtual
    remarks: >-
      See [IWebPartPropertiesMetadata](xref:@microsoft/sp-webpart-base!IWebPartPropertiesMetadata:interface) for more
      information about how to define metadata
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get propertiesMetadata(): IWebPartPropertiesMetadata | undefined;'
      return:
        type: '<xref uid="@microsoft/sp-webpart-base!IWebPartPropertiesMetadata:interface" /> | undefined'
  - name: title
    uid: '@microsoft/sp-webpart-base!BaseWebPart#title:member'
    package: '@microsoft/sp-webpart-base!'
    fullName: title
    summary: Title of the WebPart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected get title(): string;'
      return:
        type: string
methods:
  - name: getPropertyPaneConfiguration()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#getPropertyPaneConfiguration:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: getPropertyPaneConfiguration()
    summary: >-
      This API is used to ger the configuration to build the property pane for the web part. If the web part wants to
      use the PropertyPane for configuration, this API needs to be overridden and the web part needs to return the
      configuration for the PropertyPane.


      This API is not invoked until the 'loadPropertyPaneResources' promise is resolved.


      See IPropertyPane and other PropertyPane integration wiki documentation for more details. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;'
      return:
        type: '<xref uid="@microsoft/sp-webpart-base!IPropertyPaneConfiguration:interface" />'
        description: ''
  - name: getTopActionsConfiguration()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#getTopActionsConfiguration:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: getTopActionsConfiguration()
    summary: Returns the configuration for this webpart's top actions or undefined if the webpart doesn't support top actions.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTopActionsConfiguration(): ITopActions | undefined;'
      return:
        type: '<xref uid="@microsoft/sp-top-actions!ITopActions:interface" /> | undefined'
        description: ''
  - name: loadPropertyPaneResources()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#loadPropertyPaneResources:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: loadPropertyPaneResources()
    summary: This API enables asynchronous loading of property pane related resources of the web part.
    remarks: >-
      If not overridden by the web part, base web part resolves the promise immediately.


      This method is called before any property pane APIs are called. Other property pane APIs cannot be called until
      this promise is resolved. No other property pane related events are raised except
      'PropertyPaneConfigurationComplete'.


      'PropertyPaneConfigurationComplete' event can be raised to clean up any pending resources including
      'loadPropertyPaneResources' promise.
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        /** @virtual */
        protected loadPropertyPaneResources(): Promise<void>;
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: 'onAfterDeserialize(deserializedObject, dataVersion)'
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onAfterDeserialize:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: 'onAfterDeserialize(deserializedObject, dataVersion)'
    summary: >-
      This API is called after the web part is deserialized to an object, right before the property bag is populated.
      virtual
    remarks: >-
      The default implementation is a no-op. A web part developer can override this API if the deserialized object does
      not fully reflect the initial state of the property bag. This gives the web part developer a chance to populate
      the property bag right after the data is deserialized to an object.


      An important scenario to use deserialize is upgrading. An upgraded web part may load the data that was serialized
      by an older version of the web part that supported a different schema of the property bag, resulting the
      deserialized object to be inconsistent with the current schema of the property bag. The developer can use
      `onAfterDeserialize` to check the dataVersion and fix the property bag.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onAfterDeserialize(deserializedObject: any, dataVersion: Version): TProperties;'
      parameters:
        - id: deserializedObject
          description: >-
            The object deserialized from the stored data. Note that the schema of this object is not necessarily
            consistent with the current property bag, because the serialization could have been done by an older version
            of the web part
          type: any
        - id: dataVersion
          description: >-
            The data version of the stored data being deserialized. You can use this value to determine if the data was
            serialized by an older web part. Web parts can define their data version by overriding the dataVersion
            property.
          type: '<xref uid="@microsoft/sp-core-library!Version:class" />'
      return:
        type: TProperties
        description: The property bag of the web part
  - name: onAfterPropertyPaneChangesApplied()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onAfterPropertyPaneChangesApplied:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onAfterPropertyPaneChangesApplied()
    summary: >-
      This API is invoked after the changes made on the PropertyPane are applied when the PropertyPane is used in
      Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onAfterPropertyPaneChangesApplied(): void;'
      return:
        type: void
        description: ''
  - name: onBeforeSerialize()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onBeforeSerialize:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onBeforeSerialize()
    summary: This event method is called before the web part is serialized. virtual
    remarks: >-
      The default implementation is a no-op. The serialization process serializes the web part property bag i.e.
      this.properties. This API gives the web part a chance to update it's property bag before the serialization
      happens. Some web part's may keep their state other objects or even in the DOM. If a web part needs to persist
      some of that state, it needs to override this API and update the web part property bag to the latest state. If a
      web part updates the property bag with invalid property values, those will get persisted. So that should be
      avoided. The web part property bag should always contain valid property values.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onBeforeSerialize(): void;'
      return:
        type: void
        description: ''
  - name: onDisplayModeChanged(oldDisplayMode)
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onDisplayModeChanged:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onDisplayModeChanged(oldDisplayMode)
    summary: This event method is called when the display mode of a web part is changed. virtual
    remarks: >-
      The default implementation of this API calls the web part render method to re-render the web part with the new
      display mode. If a web part developer does not want a full re-render to happen on display mode change, they can
      override this API and perform specific updates to the web part DOM to switch its display mode.


      If the web part is initialized or re-initialized when switching to a different display mode then this lifecycle
      method is not called. Example: SharePoint Site Page.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;'
      parameters:
        - id: oldDisplayMode
          description: The old display mode.
          type: '<xref uid="@microsoft/sp-core-library!DisplayMode:enum" />'
      return:
        type: void
        description: ''
  - name: onDispose()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onDispose:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onDispose()
    summary: This API should be used to refresh the contents of the PropertyPane. virtual
    remarks: >-
      This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
      resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
      like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
      transitioned out.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onDispose(): void;'
      return:
        type: void
        description: ''
  - name: onInit()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onInit:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onInit()
    summary: This event method is called when the web part is initialized. virtual
    remarks: >-
      This API should be overridden to perform long running operations e.g. data fetching from a remote service before
      the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method. This
      API is called only once during the lifecycle of a web part.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onInit(): Promise<void>;'
      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: onPropertyPaneConfigurationComplete()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onPropertyPaneConfigurationComplete:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onPropertyPaneConfigurationComplete()
    summary: This API is invoked when the configuration is completed on the PropertyPane. virtual
    remarks: |-
      This event method is invoked in the following cases:

      - When the CONFIGURATION\_COMPLETE\_TIMEOUT((currently the value is 5 secs) elapses after the last change.

      - When user clicks the "X" (close) button before the CONFIGURATION\_COMPLETE\_TIMEOUT elapses.

      - When user clicks the 'Apply' button before the CONFIGURATION\_COMPLETE\_TIMEOUT elapses.

      - When the user switches web parts then the current web part gets this event.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onPropertyPaneConfigurationComplete(): void;'
      return:
        type: void
        description: ''
  - name: onPropertyPaneConfigurationStart()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onPropertyPaneConfigurationStart:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onPropertyPaneConfigurationStart()
    summary: This event method is invoked when the configuration starts on the PropertyPane. virtual
    remarks: |-
      This event method is invoked in the following cases:

      - When the PropertyPane is opened.

      - When the user switches web parts then the new web part gets this event.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onPropertyPaneConfigurationStart(): void;'
      return:
        type: void
        description: ''
  - name: 'onPropertyPaneFieldChanged(propertyPath, oldValue, newValue)'
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onPropertyPaneFieldChanged:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: 'onPropertyPaneFieldChanged(propertyPath, oldValue, newValue)'
    summary: >-
      This API is invoked after updating the new value of the property in the property bag when the PropertyPane is
      being used in Reactive mode. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;'
      parameters:
        - id: propertyPath
          description: >-
            JSON path of the property in the property bag. In the case of custom field, if no target property is
            provided then a custom value is assigned, which will be in the form of `__CustomField_<key provided when the
            custom field is created>`<!-- -->.
          type: string
        - id: oldValue
          description: Old value of the property. This value could be undefined/empty in the case of custom field.
          type: any
        - id: newValue
          description: New value of the property. This value could be undefined/empty in the case of custom field.
          type: any
      return:
        type: void
        description: ''
  - name: onPropertyPaneRendered()
    uid: '@microsoft/sp-webpart-base!BaseWebPart#onPropertyPaneRendered:member(1)'
    package: '@microsoft/sp-webpart-base!'
    fullName: onPropertyPaneRendered()
    summary: This API is invoked when the PropertyPane is rendered. virtual
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'protected onPropertyPaneRendered(): void;'
      return:
        type: void
        description: ''
extends: '<xref uid="@microsoft/sp-component-base!BaseComponent:class" />'
