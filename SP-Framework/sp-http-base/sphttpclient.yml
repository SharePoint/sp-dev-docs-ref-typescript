### YamlMime:TSType
name: SPHttpClient
uid: '@microsoft/sp-http-base!SPHttpClient:class'
package: '@microsoft/sp-http-base!'
fullName: SPHttpClient
summary: >-
  SPHttpClient is used to perform REST calls against SharePoint. It adds default headers, manages the digest needed for
  writes, and collects telemetry that helps the service to monitor the performance of an application.
remarks: >-
  This class is marked as `@sealed`. Subclasses should not extend it.


  For communicating with other internet services, use the [HttpClient](xref:@microsoft/sp-http-base!HttpClient:class)
  class.
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: (constructor)(serviceScope)
    uid: '@microsoft/sp-http-base!SPHttpClient:constructor(1)'
    package: '@microsoft/sp-http-base!'
    fullName: (constructor)(serviceScope)
    summary: Constructs a new instance of the `SPHttpClient` class
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'constructor(serviceScope: ServiceScope);'
      parameters:
        - id: serviceScope
          description: ''
          type: '<xref uid="@microsoft/sp-core-library!ServiceScope:class" />'
properties:
  - name: configurations
    uid: '@microsoft/sp-http-base!SPHttpClient.configurations:member'
    package: '@microsoft/sp-http-base!'
    fullName: configurations
    summary: The standard predefined SPHttpClientConfiguration objects for use with the SPHttpClient class.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static readonly configurations: ISPHttpClientConfigurations;'
      return:
        type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientConfigurations:interface" />'
  - name: isNavigate
    uid: '@microsoft/sp-http-base!SPHttpClient#isNavigate:member'
    package: '@microsoft/sp-http-base!'
    fullName: isNavigate
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        get isNavigate(): boolean;

        set isNavigate(isNavigate: boolean);
      return:
        type: boolean
  - name: serviceKey
    uid: '@microsoft/sp-http-base!SPHttpClient.serviceKey:member'
    package: '@microsoft/sp-http-base!'
    fullName: serviceKey
    summary: The service key for SPHttpClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static readonly serviceKey: ServiceKey<SPHttpClient>;'
      return:
        type: >-
          <xref uid="@microsoft/sp-core-library!ServiceKey:class" />&lt;<xref
          uid="@microsoft/sp-http-base!SPHttpClient:class" />&gt;
methods:
  - name: '_fetch(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClient#_fetch:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: '_fetch(url, configuration, options)'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        protected _fetch(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: ''
          type: string
        - id: configuration
          description: ''
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientConfiguration:class" />'
        - id: options
          description: ''
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: ''
  - name: beginBatch(batchCreationOptions)
    uid: '@microsoft/sp-http-base!SPHttpClient#beginBatch:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: beginBatch(batchCreationOptions)
    summary: 'Begins an ODATA batch, which allows multiple REST queries to be bundled into a single web request.'
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'beginBatch(batchCreationOptions?: ISPHttpClientBatchCreationOptions): SPHttpClientBatch;'
      parameters:
        - id: batchCreationOptions
          description: ''
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientBatchCreationOptions:interface" />'
      return:
        type: '<xref uid="@microsoft/sp-http-base!SPHttpClientBatch:class" />'
        description: >-
          An [SPHttpClientBatch](xref:@microsoft/sp-http-base!SPHttpClientBatch:class) object used to manage the batch
          operation.
  - name: 'fetch(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClient#fetch:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'fetch(url, configuration, options)'
    summary: Perform a REST service call.
    remarks: >-
      Generally, the parameters and semantics for SPHttpClient.fetch() are essentially the same as the WHATWG API
      standard that is documented here: https://fetch.spec.whatwg.org/


      The SPHttpClient subclass adds some additional behaviors that are convenient when working with SharePoint ODATA
      API's (which can be avoided by using HttpClient instead):


      - Default "Accept" and "Content-Type" headers are added if not explicitly specified.


      - For write operations, an "X-RequestDigest" header is automatically added


      - The request digest token is automatically fetched and stored in a cache, with support for preloading


      For a write operation, SPHttpClient will automatically add the "X-RequestDigest" header, which may need to be
      obtained by issuing a separate request such as "https://example.com/sites/sample/\_api/contextinfo". Typically the
      appropriate SPWeb URL can be guessed by looking for a reserved URL segment such as "\_api" in the original URL
      passed to fetch(); if not, use ISPHttpClientOptions.webUrl to specify it explicitly.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        fetch(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
  - name: 'get(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClient#get:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'get(url, configuration, options)'
    summary: 'Calls fetch(), but sets the method to "GET".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        get(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
  - name: getWebUrlFromRequestUrl(requestUrl)
    uid: '@microsoft/sp-http-base!SPHttpClient.getWebUrlFromRequestUrl:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: getWebUrlFromRequestUrl(requestUrl)
    summary: Use a heuristic to infer the base URL for authentication.
    remarks: >-
      Attempts to infer the SPWeb URL associated with the provided REST URL, by looking for common SharePoint path
      components such as "\_api", "\_layouts", or "\_vit\_bin". This is necessary for operations such as the
      X-RequestDigest and ODATA batching, which require POSTing to a separate REST endpoint in order to complete a
      request.


      For example, if the requestUrl is "/sites/site/web/\_api/service", the returned URL would be "/sites/site/web". Or
      if the requestUrl is "http://example.com/\_layouts/service", the returned URL would be "http://example.com".


      If the URL cannot be determined, an exception is thrown.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static getWebUrlFromRequestUrl(requestUrl: string): string;'
      parameters:
        - id: requestUrl
          description: The URL for a SharePoint REST service
          type: string
      return:
        type: string
        description: the inferred SPWeb URL
  - name: 'post(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClient#post:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'post(url, configuration, options)'
    summary: 'Calls fetch(), but sets the method to "POST".'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        post(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
