### YamlMime:TSType
name: SPHttpClientBatch
uid: '@microsoft/sp-http-base!SPHttpClientBatch:class'
package: '@microsoft/sp-http-base!'
fullName: SPHttpClientBatch
summary: >-
  The SPHttpClientBatch class accumulates a number of REST service calls and transmits them as a single ODATA batch.
  This protocol is documented here: http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html


  The usage is to call SPHttpClientBatch.fetch() to queue each individual request, and then call
  SPHttpClientBatch.execute() to execute the batch operation. The execute() method returns a promise that resolves when
  the real REST call has completed. Each call to fetch() also returns a promise that will resolve with an
  SPHttpClientResponse object for that particular request.
remarks: >-
  The constructor for this class is marked as internal. Third-party code should not call the constructor directly or
  create subclasses that extend the `SPHttpClientBatch` class.
isPreview: true
isDeprecated: false
type: class
properties:
  - name: configurations
    uid: '@microsoft/sp-http-base!SPHttpClientBatch.configurations:member'
    package: '@microsoft/sp-http-base!'
    fullName: configurations
    summary: The standard predefined SPHttpClientBatchConfigurations objects for use with the SPHttpClientBatch class.
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'static readonly configurations: ISPHttpClientBatchConfigurations;'
      return:
        type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientBatchConfigurations:interface" />'
methods:
  - name: execute()
    uid: '@microsoft/sp-http-base!SPHttpClientBatch#execute:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: execute()
    summary: Executes the batched queries that were queued using SPHttpClientBatch.fetch().
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'execute(): Promise<SPHttpClientBatch>;'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientBatch:class" />&gt;'
        description: ''
  - name: 'fetch(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClientBatch#fetch:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'fetch(url, configuration, options)'
    summary: >-
      Queues a new request, and returns a promise that can be used to access the server response (after execute() has
      completed).
    remarks: >-
      The parameters for this function are basically the same as the WHATWG API standard documented here:


      [https://fetch.spec.whatwg.org/](https://fetch.spec.whatwg.org/)


      However, be aware that certain REST headers are ignored or not allowed inside a batch. See the ODATA documentation
      for details.


      When execute() is called, it will POST to a URL such as "http://example.com/sites/sample/\_api/$batch". Typically
      SPHttpClientBatch can successfully guess the appropriate SPWeb URL by looking for a reserved URL segment such as
      "\_api" in the first URL passed to fetch(). If not, use ISPHttpClientBatchCreationOptions.webUrl to specify it
      explicitly.
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        fetch(url: string, configuration: SPHttpClientBatchConfiguration, options?: ISPHttpClientBatchOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of this request; normally this should be the latest version number from
            SPHttpClientBatchConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientBatchConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientBatchOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
  - name: 'get(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClientBatch#get:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'get(url, configuration, options)'
    summary: 'Calls fetch(), but sets the method to ''GET''.'
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        get(url: string, configuration: SPHttpClientBatchConfiguration, options?: ISPHttpClientBatchOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of this request; normally this should be the latest version number from
            SPHttpClientBatchConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientBatchConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientBatchOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
  - name: 'post(url, configuration, options)'
    uid: '@microsoft/sp-http-base!SPHttpClientBatch#post:member(1)'
    package: '@microsoft/sp-http-base!'
    fullName: 'post(url, configuration, options)'
    summary: 'Calls fetch(), but sets the method to ''POST''.'
    remarks: ''
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        post(url: string, configuration: SPHttpClientBatchConfiguration, options: ISPHttpClientBatchOptions):
        Promise<SPHttpClientResponse>;
      parameters:
        - id: url
          description: the URL to fetch
          type: string
        - id: configuration
          description: >-
            determines the default behavior of this request; normally this should be the latest version number from
            SPHttpClientBatchConfigurations
          type: '<xref uid="@microsoft/sp-http-base!SPHttpClientBatchConfiguration:class" />'
        - id: options
          description: additional options that affect the request
          type: '<xref uid="@microsoft/sp-http-base!ISPHttpClientBatchOptions:interface" />'
      return:
        type: 'Promise&lt;<xref uid="@microsoft/sp-http-base!SPHttpClientResponse:class" />&gt;'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http-base!HttpClientResponse%23ok:member) being false) for error
          status codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that
          prevent communication with the server.
