### YamlMime:TSType
name: ISerializedServerProcessedData
uid: '@microsoft/sp-component-base!ISerializedServerProcessedData:interface'
package: '@microsoft/sp-component-base!'
fullName: ISerializedServerProcessedData
summary: Contains collections of data that can be processed by server side services like search index and link fixup
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: componentDependencies
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#componentDependencies:member'
    package: '@microsoft/sp-component-base!'
    fullName: componentDependencies
    summary: A key-value map where keys are string identifiers and values are component ids.
    remarks: >-
      SharePoint servers might decide to use this hint to preload the script for corresponding components for
      performance boost.


      Example:


      ```

      {
        'layoutComponent': 'abfccb4d-fcbc-4720-8bcc-6183ce66c391',
        'dataComponent': 'f0baf432-de3f-4f0f-8444-d1280b2f8cc5'
      }

      ```
    isPreview: true
    isDeprecated: false
    syntax:
      content: |-
        componentDependencies?: {
                [key: string]: string;
            };
      return:
        type: |-
          {
                  [key: string]: string;
              }
  - name: customMetadata
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#customMetadata:member'
    package: '@microsoft/sp-component-base!'
    fullName: customMetadata
    summary: A key-value map where keys are string identifier and values are object of custom key-value pair
    remarks: >-
      SharePoint servers might treat custom medata values in context of the other properties like imageSources. E.g.
      When the key of imageSources and customMetadata is same, custom metadata can be used to expand information of
      image data.


      Example:


      ```

      ISerializedServerProcessedData {
        imageSources: {
         'myImage1': 'http://res.contoso.com/path/to/file',
         'myImage2': 'https://res.contoso.com/someName.jpg'
        },

        customMetadata: {
          'myImage1': {'height': '100', 'width': '100'}
          'myImage2': {'height': '400', 'width': '600'}
        }
      }

      ```
    isPreview: true
    isDeprecated: false
    syntax:
      content: |-
        customMetadata?: {
                [key: string]: {
                    [key: string]: {};
                };
            };
      return:
        type: |-
          {
                  [key: string]: {
                      [key: string]: {};
                  };
              }
  - name: htmlStrings
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#htmlStrings:member'
    package: '@microsoft/sp-component-base!'
    fullName: htmlStrings
    summary: A key-value map where keys are string identifiers and values are rich text with HTML format.
    remarks: >-
      SharePoint servers treat the values as HTML content and run services like safety checks, search index and link
      fixup on them.


      Example:


      ```

      {
        'myRichDescription': '<div>Some standard <b>HTML content</b><a href='http://somelink'>A Link</a></div>'
        'anotherRichText': <div class='aClass'><span style='color:red'>Some red text</div>
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        htmlStrings?: {
                [key: string]: string;
            };
      return:
        type: |-
          {
                  [key: string]: string;
              }
  - name: imageSources
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#imageSources:member'
    package: '@microsoft/sp-component-base!'
    fullName: imageSources
    summary: A key-value map where keys are string identifiers and values are image sources.
    remarks: |-
      SharePoint servers treat the values as image sources and run services like search index and link fixup on them.

      Example:

      ```
      {
        'myImage1': 'http://res.contoso.com/path/to/file'
        'myImage2': 'https://res.contoso.com/someName.jpg'
      }
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        imageSources?: {
                [key: string]: string;
            };
      return:
        type: |-
          {
                  [key: string]: string;
              }
  - name: links
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#links:member'
    package: '@microsoft/sp-component-base!'
    fullName: links
    summary: A key-value map where keys are string identifiers and values are links.
    remarks: |-
      SharePoint servers treat the values as links and run services like link fixup on them.

      Example:

      ```
      {
        'myWebURL': 'http://contoso.com'
        'myFileLink': 'https://res.contoso.com/file.docx'
      }
      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        links?: {
                [key: string]: string;
            };
      return:
        type: |-
          {
                  [key: string]: string;
              }
  - name: searchablePlainTexts
    uid: '@microsoft/sp-component-base!ISerializedServerProcessedData#searchablePlainTexts:member'
    package: '@microsoft/sp-component-base!'
    fullName: searchablePlainTexts
    summary: A key-value map where keys are string identifiers and values are strings that should be search indexed.
    remarks: >-
      The values are HTML-encoded before being sent to the server. The encoded values are visible to the search indexer,
      but are not treated as valid HTML. So, other services such as link fixup will not run on them.


      Example:


      ```

      {
       'justSomeText': 'This is some plain text',
       'anotherText': 'Can have <any> characters here: "<>&\''
      }

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        searchablePlainTexts?: {
                [key: string]: string;
            };
      return:
        type: |-
          {
                  [key: string]: string;
              }
