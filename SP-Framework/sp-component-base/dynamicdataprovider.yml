### YamlMime:TSType
name: DynamicDataProvider
uid: '@microsoft/sp-component-base!DynamicDataProvider:class'
package: '@microsoft/sp-component-base!'
fullName: DynamicDataProvider
summary: >-
  The Dynamic Data Provider allows components to consume Dynamic Data. It allows components to request Dynamic Data
  sources and register/unregister to those.
remarks: ''
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: isDisposed
    uid: '@microsoft/sp-component-base!DynamicDataProvider#isDisposed:member'
    package: '@microsoft/sp-component-base!'
    fullName: isDisposed
    summary: Returns true if the Dynamic Data Provider is disposed.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'get isDisposed(): boolean;'
      return:
        type: boolean
methods:
  - name: dispose()
    uid: '@microsoft/sp-component-base!DynamicDataProvider#dispose:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: dispose()
    summary: Disposes the Dynamic Data Provider.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dispose(): void;'
      return:
        type: void
        description: ''
  - name: getAvailableSources()
    uid: '@microsoft/sp-component-base!DynamicDataProvider#getAvailableSources:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: getAvailableSources()
    summary: Returns a list with all available Dynamic Data Sources.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAvailableSources(): ReadonlyArray<IDynamicDataSource>;'
      return:
        type: 'ReadonlyArray&lt;<xref uid="@microsoft/sp-dynamic-data!IDynamicDataSource:interface" />&gt;'
        description: Read-only array with all available sources.
  - name: registerAvailableSourcesChanged(callback)
    uid: '@microsoft/sp-component-base!DynamicDataProvider#registerAvailableSourcesChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: registerAvailableSourcesChanged(callback)
    summary: Registers a callback to an event that raises when the list of available Dynamic Data Sources is updated.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'registerAvailableSourcesChanged(callback: () => void): void;'
      parameters:
        - id: callback
          description: Function to execute when the sources are updated.
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: 'registerPropertyChanged(sourceId, propertyId, callback)'
    uid: '@microsoft/sp-component-base!DynamicDataProvider#registerPropertyChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: 'registerPropertyChanged(sourceId, propertyId, callback)'
    summary: Registers a callback for updates when a property is changed in a Dynamic Data source.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'registerPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;'
      parameters:
        - id: sourceId
          description: Id of the Dynamic Data Source.
          type: string
        - id: propertyId
          description: Id of the property of the source.
          type: string
        - id: callback
          description: Function to execute when the source updates its data.
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: 'registerSourceChanged(sourceId, callback)'
    uid: '@microsoft/sp-component-base!DynamicDataProvider#registerSourceChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: 'registerSourceChanged(sourceId, callback)'
    summary: >-
      Registers a callback for updates when a Dynamic Data source is changed. This happens when any property is updated
      within the source.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'registerSourceChanged(sourceId: string, callback: () => void): void;'
      parameters:
        - id: sourceId
          description: Id of the Dynamic Data Source.
          type: string
        - id: callback
          description: Function to execute when the source updates its data.
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: tryGetSource(id)
    uid: '@microsoft/sp-component-base!DynamicDataProvider#tryGetSource:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: tryGetSource(id)
    summary: 'Returns a Dynamic Data Source, by its id. If the source is not present, it returns undefined.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tryGetSource(id: string): IDynamicDataSource | undefined;'
      parameters:
        - id: id
          description: Id of the Dynamic Data Source.
          type: string
      return:
        type: '<xref uid="@microsoft/sp-dynamic-data!IDynamicDataSource:interface" /> | undefined'
        description: ''
  - name: unregisterAvailableSourcesChanged(callback)
    uid: '@microsoft/sp-component-base!DynamicDataProvider#unregisterAvailableSourcesChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: unregisterAvailableSourcesChanged(callback)
    summary: Unregisters a callback to an event that raises when the list of available Dynamic Data Sources is updated.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unregisterAvailableSourcesChanged(callback: () => void): void;'
      parameters:
        - id: callback
          description: Function to remove from the registration. Must be the same it was registered with.
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: 'unregisterPropertyChanged(sourceId, propertyId, callback)'
    uid: '@microsoft/sp-component-base!DynamicDataProvider#unregisterPropertyChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: 'unregisterPropertyChanged(sourceId, propertyId, callback)'
    summary: Unregisters a callback for updates when a property is changed in a Dynamic Data source.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unregisterPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;'
      parameters:
        - id: sourceId
          description: Id of the Dynamic Data Source.
          type: string
        - id: propertyId
          description: Id of the property of the source.
          type: string
        - id: callback
          description: Function to remove from the registration. Must be the same it was registered with.
          type: () =&gt; void
      return:
        type: void
        description: ''
  - name: 'unregisterSourceChanged(sourceId, callback)'
    uid: '@microsoft/sp-component-base!DynamicDataProvider#unregisterSourceChanged:member(1)'
    package: '@microsoft/sp-component-base!'
    fullName: 'unregisterSourceChanged(sourceId, callback)'
    summary: Unregisters a callback for updates when a Dynamic Data source is changed.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unregisterSourceChanged(sourceId: string, callback: () => void): void;'
      parameters:
        - id: sourceId
          description: Id of the Dynamic Data Source.
          type: string
        - id: callback
          description: Function to remove from the registration. Must be the same it was registered with.
          type: () =&gt; void
      return:
        type: void
        description: ''
