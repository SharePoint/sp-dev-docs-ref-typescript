### YamlMime:TSType
name: IDynamicDataCallables
uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables:interface'
package: '@microsoft/sp-dynamic-data!'
fullName: IDynamicDataCallables
summary: >-
  Interface for components to implement in order to be dynamic data sources. This can be implemented as an object with
  state, or a set of loose functions that returns the data.
remarks: ''
example: []
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: allowedEvents()
    uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables#allowedEvents:member(1)'
    package: '@microsoft/sp-dynamic-data!'
    fullName: allowedEvents()
    summary: |-
      Returns list of allowed events on the dynamic data source.

      When this function returns a non-empty result, then source must define 'sendEvent' api.

      If this api is not defined or returns an empty array, then no consumer will be able to talk to this source.
    remarks: ''
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'allowedEvents?(): ReadonlyArray<IDynamicDataEventDefinition>;'
      return:
        type: 'ReadonlyArray&lt;<xref uid="@microsoft/sp-dynamic-data!IDynamicDataEventDefinition:interface" />&gt;'
        description: ''
  - name: getAnnotatedPropertyValue(propertyId)
    uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables#getAnnotatedPropertyValue:member(1)'
    package: '@microsoft/sp-dynamic-data!'
    fullName: getAnnotatedPropertyValue(propertyId)
    summary: >-
      Given a property id, returns its annotated value. If the source doesn't supply the annotated value, then it falls
      back to whatever 'getPropertyValue' returns as the sample value and metadata would be undefined.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAnnotatedPropertyValue?(propertyId: string): IDynamicDataAnnotatedPropertyValue | undefined;'
      parameters:
        - id: propertyId
          description: One of the property ids exposed from the dynamic data source.
          type: string
      return:
        type: '<xref uid="@microsoft/sp-dynamic-data!IDynamicDataAnnotatedPropertyValue:interface" /> | undefined'
        description: ''
  - name: getPropertyDefinitions()
    uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables#getPropertyDefinitions:member(1)'
    package: '@microsoft/sp-dynamic-data!'
    fullName: getPropertyDefinitions()
    summary: Returns all the property definitions that the DataSource will provide.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPropertyDefinitions(): ReadonlyArray<IDynamicDataPropertyDefinition>;'
      return:
        type: 'ReadonlyArray&lt;<xref uid="@microsoft/sp-dynamic-data!IDynamicDataPropertyDefinition:interface" />&gt;'
        description: ''
  - name: getPropertyValue(propertyId)
    uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables#getPropertyValue:member(1)'
    package: '@microsoft/sp-dynamic-data!'
    fullName: getPropertyValue(propertyId)
    summary: 'Given a property id, returns the value of the property.'
    remarks: 'It is assumed that when this function returns an array, it is homogeneous.'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPropertyValue(propertyId: string): any;'
      parameters:
        - id: propertyId
          description: ''
          type: string
      return:
        type: any
        description: ''
  - name: 'sendEvent(eventName, data)'
    uid: '@microsoft/sp-dynamic-data!IDynamicDataCallables#sendEvent:member(1)'
    package: '@microsoft/sp-dynamic-data!'
    fullName: 'sendEvent(eventName, data)'
    summary: >-
      If defined, enables the consumer to send data to the associated dynamic data source. Then source can act
      accordingly.


      Invoking this api throws an error when the passed in 'eventName' is not one of the allowed events on the source.
    remarks: ''
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'sendEvent?(eventName: string, data: any): void;'
      parameters:
        - id: eventName
          description: A case-sensitive string representing the name of the event.
          type: string
        - id: data
          description: Data to be sent to the dynamic data source.
          type: any
      return:
        type: void
        description: ''
